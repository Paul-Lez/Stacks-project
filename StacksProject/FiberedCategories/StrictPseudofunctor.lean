import Mathlib.CategoryTheory.Bicategory.Functor
import Mathlib.CategoryTheory.EqToHom
import Mathlib.CategoryTheory.Bicategory.LocallyDiscrete

/- This file contains lemmas that (in some form) should be PRd to CategoryTheory/Bicategory
These are not directly related to stacks / fibered categories
-/

namespace CategoryTheory

open Category Bicategory

namespace Pseudofunctor

universe w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ


variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]
variable (F : Pseudofunctor B C)

lemma map‚ÇÇ_eqToHom {a b : B} {f g : a ‚ü∂ b} (h : f = g) :
    F.map‚ÇÇ (eqToHom h) = eqToHom (F.congr_map h) := by
  subst h; simp only [eqToHom_refl, map‚ÇÇ_id]

end Pseudofunctor

open CategoryTheory Bicategory Discrete LocallyDiscrete

universe w‚ÇÇ v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

variable {I : Type u‚ÇÅ} [Category.{v‚ÇÅ} I] {B : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} B] [Strict B]
variable {F : Pseudofunctor (LocallyDiscrete I) B}

-- These should be stated in terms of strict bicategories
-- (and avoid .toLoc!!)

-- Pseudofunctors from locally discrete categories to strict bicategories
lemma map‚ÇÇ_left_unitor' {a b : I} (f : LocallyDiscrete.mk a ‚ü∂ LocallyDiscrete.mk b) : (F.mapComp (ùüô ‚ü®a‚ü©) f).inv =
    (F.mapId ‚ü®a‚ü©).hom ‚ñ∑ F.map f ‚â´ eqToHom (by simp) := by
  have h := F.map‚ÇÇ_left_unitor f
  simp at h
  rw [F.map‚ÇÇ_eqToHom, ‚ÜêIso.inv_comp_eq, comp_eqToHom_iff] at h
  simp at h
  apply h

lemma map‚ÇÇ_right_unitor' {a b : I} (f : a ‚ü∂ b) : (F.mapComp f.toLoc (ùüô (LocallyDiscrete.mk b))).inv =
    F.map f.toLoc ‚óÅ (F.mapId ‚ü®b‚ü©).hom ‚â´ eqToHom (by simp) := by
  have h := F.map‚ÇÇ_right_unitor f.toLoc
  simp at h
  rw [F.map‚ÇÇ_eqToHom, ‚ÜêIso.inv_comp_eq, comp_eqToHom_iff] at h
  simp at h
  apply h

lemma map‚ÇÇ_associator_hom' {a b c d : I} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    (F.mapComp f.toLoc (g.toLoc ‚â´ h.toLoc)).hom ‚â´ (F.map f.toLoc) ‚óÅ (F.mapComp g.toLoc h.toLoc).hom
    = eqToHom (by simp) ‚â´ (F.mapComp (f.toLoc ‚â´ g.toLoc) h.toLoc).hom ‚â´
    (F.mapComp f.toLoc g.toLoc).hom ‚ñ∑ F.map h.toLoc ‚â´ eqToHom (by simp)
    := by
  have h := F.map‚ÇÇ_associator f.toLoc g.toLoc h.toLoc
  simp at h
  rw [F.map‚ÇÇ_eqToHom, ‚ÜêIso.inv_comp_eq] at h
  -- TODO: rewrite thing as inv then move to LHS (+ restate lemma to use this notation instead!)
  sorry

lemma map‚ÇÇ_associator_inv' {a b c d : I} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) :
    (F.map f.toLoc) ‚óÅ (F.mapComp g.toLoc h.toLoc).inv ‚â´ (F.mapComp f.toLoc (g.toLoc ‚â´ h.toLoc)).inv
    = eqToHom (by simp) ‚â´ (F.mapComp f.toLoc g.toLoc).inv ‚ñ∑ F.map h.toLoc
    ‚â´ (F.mapComp (f.toLoc ‚â´ g.toLoc) h.toLoc).inv ‚â´ eqToHom (by simp)
    := by
  have h := F.map‚ÇÇ_associator f.toLoc g.toLoc h.toLoc
  simp at h
  rw [F.map‚ÇÇ_eqToHom, ‚ÜêIso.inv_comp_eq] at h
  -- TODO: rewrite thing as inv then move to LHS (+ restate lemma to use this notation instead!)
  sorry
