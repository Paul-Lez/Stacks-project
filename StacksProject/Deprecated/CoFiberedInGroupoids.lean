import StacksProject.Deprecated.FiberedInGroupoids

open CategoryTheory Functor Opposite

variable {S : Type u‚ÇÅ} {C : Type u‚ÇÇ} {D : Type u‚ÇÉ} [Category S] [Category C] [Category D]

-- TODO FIX DEFINITION
class IsCoCartesian (p : C ‚•§ S) {x y : C} (œÜ : y ‚ü∂ x) : Prop where
  (isCoCartesian {z : C} {œà : z ‚ü∂ x} {f : p.obj z ‚ü∂ p.obj y} (hy : f ‚â´ (p.map œÜ) = p.map œà) :
    ‚àÉ! (œá : z ‚ü∂ y), (œá ‚â´ œÜ = œà) ‚àß f = p.map œá)

class IsCofiberedInGroupoids (p : C ‚•§ S) : Prop where
  (LiftHom {x : C} {Y : S} (f : p.obj x ‚ü∂ Y) :
    ‚àÉ (y : C) (œÜ : x ‚ü∂ y) (hy : Y = p.obj y),
      CommSq f (ùüô (p.obj x)) (eqToHom hy) (p.map œÜ))
  (IsCoCartesian {x y z : C} {œÜ : x ‚ü∂ y} {œà : x ‚ü∂ z} {f : p.obj y ‚ü∂ p.obj z} :
    (p.map œÜ) ‚â´ f = p.map œà ‚Üí ‚àÉ! (œá : y ‚ü∂ z), CommSq (p.map œá) (ùüô (p.obj y)) (ùüô (p.obj z)) f)



lemma IsCofiberedInGroupoidsOpp (p : C ‚•§ S) (hp : IsCofiberedInGroupoids p) :
  IsFiberedInGroupoids p.op :=
by
  rcases hp with ‚ü®hlift, hcart‚ü©
  refine ‚ü®fun f => ?_, fun œÜ => ‚ü®?_‚ü©‚ü©
  ¬∑ rcases hlift f.unop with ‚ü®x, œÜ', unop_obj_lift, unop_hom_lift‚ü©
    existsi op x, op œÜ'
    rw [‚Üêop_inj_iff, ‚Üêop_obj, op_unop] at unop_obj_lift
    existsi unop_obj_lift.symm
    simpa only [op_obj, unop_op, op_unop, eqToHom_op, op_id, Quiver.Hom.op_unop] using CommSq.op unop_hom_lift
  intros z œà f h_comp
  rcases hcart (Quiver.Hom.op_inj h_comp) with ‚ü®œá, œá_comm, œá_unique‚ü©
  refine ‚ü®œá.op, ‚ü®‚ü®sorry, ?_‚ü©, ?_‚ü©‚ü©
  ¬∑ have hf := (CommSq.op œá_comm).1
    simp only [op_obj, Quiver.Hom.op_unop, op_id, Category.comp_id, Category.id_comp] at hf
    simp only [op_obj, hf, op_map, Quiver.Hom.unop_op]
  rintro g ‚ü®g_comm, geq‚ü©
  apply Quiver.Hom.unop_inj ((œá_unique (g.unop)) ?_)
  rw [op_map, ‚Üê(Quiver.Hom.op_unop f)] at geq
  rw [Quiver.Hom.op_inj geq]
  constructor
  simp only [Category.comp_id, Category.id_comp]
  --refine ‚ü®œá.op, ‚ü®?_, fun g g_comm => Quiver.Hom.unop_inj ((œá_unique (g.unop)) (CommSq.unop g_comm))‚ü©‚ü©

lemma IsFiberedInGroupoidsOpp (p : C ‚•§ S) (hp : IsFiberedInGroupoids p):
  IsCofiberedInGroupoids p.op :=
by
  rcases hp with ‚ü®hlift, hcart‚ü©
  refine ‚ü®fun f => ?_, ?_‚ü©
  ¬∑ rcases hlift f.unop with ‚ü®x, œÜ, unop_obj_lift, unop_hom_lift‚ü©
    existsi op x, op œÜ
    rw [‚Üêop_inj_iff, ‚Üêop_obj, op_unop] at unop_obj_lift
    existsi unop_obj_lift.symm
    simpa only [op_obj, unop_op, op_unop, eqToHom_op, op_id, Quiver.Hom.op_unop] using CommSq.op unop_hom_lift
  intros x y z œÜ œà f h_comp
  rcases (hcart œÜ.unop).isCartesian  (Quiver.Hom.op_inj h_comp) with ‚ü®œá, œá_comm, œá_unique‚ü©
  refine ‚ü®œá.op, ‚ü®sorry, sorry‚ü©‚ü©

lemma IsFiberedInGroupoids_iff_Op (p : C ‚•§ S) : IsFiberedInGroupoids p ‚Üî IsCofiberedInGroupoids p.op :=
by
  refine ‚ü®fun hp => IsFiberedInGroupoidsOpp p hp, fun hp =>  sorry --apply IsCofiberedInGroupoidsOpp p hp}
  ‚ü©

lemma IsCoiberedInGroupoids.id : IsCofiberedInGroupoids (Functor.id S·µí·µñ) :=
by simpa [show Functor.id S·µí·µñ = (Functor.id S).op from rfl, ‚ÜêIsFiberedInGroupoids_iff_Op]
  using IsFiberedInGroupoids.id
